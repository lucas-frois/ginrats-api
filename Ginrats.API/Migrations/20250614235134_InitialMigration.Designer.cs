// <auto-generated />
using System;
using Ginrats.API.Infra.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Ginrats.API.Migrations
{
    [DbContext(typeof(GinRatsContext))]
    [Migration("20250614235134_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Ginrats.API.Models.Entities.GroupEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp")
                        .HasColumnName("end_date");

                    b.Property<Guid>("GroupGoalId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_goal_id");

                    b.Property<string>("HeaderPhotoS3Key")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("header_photo_s3_key");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<bool>("RequiresPhoto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("requires_photo");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("update_at");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("GroupGoalId");

                    b.ToTable("groups", (string)null);
                });

            modelBuilder.Entity("Ginrats.API.Models.Entities.GroupGoalEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("group_goals", (string)null);
                });

            modelBuilder.Entity("Ginrats.API.Models.Entities.GroupMembershipEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("GroupId", "UserId")
                        .IsUnique();

                    b.ToTable("group_memberships", (string)null);
                });

            modelBuilder.Entity("Ginrats.API.Models.Entities.PostEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("AbvPercentage")
                        .HasColumnType("decimal")
                        .HasColumnName("abv_percentage");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValue(new DateTime(2025, 6, 14, 20, 51, 33, 808, DateTimeKind.Local).AddTicks(6615))
                        .HasColumnName("created_at");

                    b.Property<string>("DrinkName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("drink_name");

                    b.Property<string>("Notes")
                        .HasColumnType("varchar(500)")
                        .HasColumnName("notes");

                    b.Property<string>("PhotoS3Key")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("photo_s3_key");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<decimal>("VolumeML")
                        .HasColumnType("decimal")
                        .HasColumnName("volume_ml");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("UserId");

                    b.ToTable("posts", (string)null);
                });

            modelBuilder.Entity("Ginrats.API.Models.Entities.PostGroupEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid")
                        .HasColumnName("post_id");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("PostId", "GroupId")
                        .IsUnique();

                    b.ToTable("post_groups", (string)null);
                });

            modelBuilder.Entity("Ginrats.API.Models.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValue(new DateTime(2025, 6, 14, 20, 51, 33, 809, DateTimeKind.Local).AddTicks(3273))
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("ProfilePictureS3Key")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("profile_picture_s3_key");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Ginrats.API.Models.Entities.GroupEntity", b =>
                {
                    b.HasOne("Ginrats.API.Models.Entities.GroupGoalEntity", "GroupGoal")
                        .WithMany()
                        .HasForeignKey("GroupGoalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GroupGoal");
                });

            modelBuilder.Entity("Ginrats.API.Models.Entities.GroupMembershipEntity", b =>
                {
                    b.HasOne("Ginrats.API.Models.Entities.GroupEntity", "Group")
                        .WithMany("GroupMemberships")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ginrats.API.Models.Entities.UserEntity", "User")
                        .WithMany("GroupMemberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ginrats.API.Models.Entities.PostEntity", b =>
                {
                    b.HasOne("Ginrats.API.Models.Entities.UserEntity", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ginrats.API.Models.Entities.PostGroupEntity", b =>
                {
                    b.HasOne("Ginrats.API.Models.Entities.GroupEntity", "Group")
                        .WithMany("PostGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ginrats.API.Models.Entities.PostEntity", "Post")
                        .WithMany("PostGroups")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Ginrats.API.Models.Entities.GroupEntity", b =>
                {
                    b.Navigation("GroupMemberships");

                    b.Navigation("PostGroups");
                });

            modelBuilder.Entity("Ginrats.API.Models.Entities.PostEntity", b =>
                {
                    b.Navigation("PostGroups");
                });

            modelBuilder.Entity("Ginrats.API.Models.Entities.UserEntity", b =>
                {
                    b.Navigation("GroupMemberships");

                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
